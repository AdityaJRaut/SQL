use adityadb;
select * from employee_data where emp_age>30;
select * from orders where totalamount<500;
select * from customers where email like '%gmail.com';
select * from orders where orderdate between '2025-01-01' and '2025-01-31';
select * from employee_data where emp_salary between 40000 and 60000;
select * from customers where postalcode is null;
select * from orders where orderid is not null;
select sum(emp_salary) from employee_data;
select max(price),min(price),avg(price) from productdetails;
select count(orderid) from orders;
alter table employee_data add column dob date;
alter table customers change column email email varchar(30);
SET SQL_SAFE_UPDATES=0;
update employee_data set emp_salary = emp_salary * 0.1;
update orders set status ='completed' where totalamount>1000;
select emp_fname from employee_data order by emp_salary desc limit 5;
select * from productdetails limit 10;
select * from employee_data order by emp_lname; 
select * from productdetails order by price desc;
select concat(emp_fname," ",emp_lname) as 'Employee Name' from employee_data;
select productId,productName,price as 'Product Cost' from productdetails;
select * from customers inner join orders on customers.CustomerID=orders.CUSTOMERID;
select * from employee_data left join emp_department on employee_data.EMP_DEPT=emp_department.DPT_CODE;
select sum(TOTALAMOUNT),CUSTOMERID from orders group by CUSTOMERID; 
select count(EMP_IDNO),EMP_DEPT from employee_data group by emp_dept;
select CUSTOMERID,count(*) from orders group by CUSTOMERID having count(*)>1;
select DPT_NAME from emp_department group by DPT_NAME having avg(DPT_ALLOTMENT)>50000;
create table users (user_id int primary key,email varchar(45) unique);
alter table orders add constraint customerid foreign key(customerid) references customers(customerid);
select * from productdetails union select * from productdetailsbackup;
select * from productdetails union all select * from productdetailsbackup;